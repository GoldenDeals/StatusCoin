// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: p2p.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Function int32

const (
	Function_EM_UNSPECIFIED       Function = 0
	Function_EM_HandShake         Function = 1
	Function_EM_HandShakeDecision Function = 2
	Function_EM_GetInfo           Function = 3
	Function_EM_GetInfoAns        Function = 4
	Function_EM_GetPeers          Function = 5
	Function_EM_GetPeersAns       Function = 6
)

// Enum value maps for Function.
var (
	Function_name = map[int32]string{
		0: "EM_UNSPECIFIED",
		1: "EM_HandShake",
		2: "EM_HandShakeDecision",
		3: "EM_GetInfo",
		4: "EM_GetInfoAns",
		5: "EM_GetPeers",
		6: "EM_GetPeersAns",
	}
	Function_value = map[string]int32{
		"EM_UNSPECIFIED":       0,
		"EM_HandShake":         1,
		"EM_HandShakeDecision": 2,
		"EM_GetInfo":           3,
		"EM_GetInfoAns":        4,
		"EM_GetPeers":          5,
		"EM_GetPeersAns":       6,
	}
)

func (x Function) Enum() *Function {
	p := new(Function)
	*p = x
	return p
}

func (x Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_proto_enumTypes[0].Descriptor()
}

func (Function) Type() protoreflect.EnumType {
	return &file_p2p_proto_enumTypes[0]
}

func (x Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function.Descriptor instead.
func (Function) EnumDescriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{0}
}

type PeerStatus int32

const (
	PeerStatus_EM_UNKNOWN      PeerStatus = 0
	PeerStatus_EM_CONNECTED    PeerStatus = 1
	PeerStatus_EM_DISCONNECTED PeerStatus = 2
	PeerStatus_EM_BANNED       PeerStatus = 3
)

// Enum value maps for PeerStatus.
var (
	PeerStatus_name = map[int32]string{
		0: "EM_UNKNOWN",
		1: "EM_CONNECTED",
		2: "EM_DISCONNECTED",
		3: "EM_BANNED",
	}
	PeerStatus_value = map[string]int32{
		"EM_UNKNOWN":      0,
		"EM_CONNECTED":    1,
		"EM_DISCONNECTED": 2,
		"EM_BANNED":       3,
	}
)

func (x PeerStatus) Enum() *PeerStatus {
	p := new(PeerStatus)
	*p = x
	return p
}

func (x PeerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_proto_enumTypes[1].Descriptor()
}

func (PeerStatus) Type() protoreflect.EnumType {
	return &file_p2p_proto_enumTypes[1]
}

func (x PeerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerStatus.Descriptor instead.
func (PeerStatus) EnumDescriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{1}
}

type ErrorCode int32

const (
	ErrorCode_NO_ERROR          ErrorCode = 0
	ErrorCode_INVALID_PROTOCOL  ErrorCode = 1
	ErrorCode_VERSION_MISMATCH  ErrorCode = 2
	ErrorCode_RATE_LIMITED      ErrorCode = 3
	ErrorCode_BANNED            ErrorCode = 4
	ErrorCode_INVALID_SIGNATURE ErrorCode = 5
	ErrorCode_INTERNAL_ERROR    ErrorCode = 6
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "NO_ERROR",
		1: "INVALID_PROTOCOL",
		2: "VERSION_MISMATCH",
		3: "RATE_LIMITED",
		4: "BANNED",
		5: "INVALID_SIGNATURE",
		6: "INTERNAL_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":          0,
		"INVALID_PROTOCOL":  1,
		"VERSION_MISMATCH":  2,
		"RATE_LIMITED":      3,
		"BANNED":            4,
		"INVALID_SIGNATURE": 5,
		"INTERNAL_ERROR":    6,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_p2p_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{2}
}

// Connection Fundamentals
type HandShake struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion uint32                 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ClientVersion   string                 `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	NodeId          []byte                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Capabilities    []string               `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HandShake) Reset() {
	*x = HandShake{}
	mi := &file_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandShake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandShake) ProtoMessage() {}

func (x *HandShake) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandShake.ProtoReflect.Descriptor instead.
func (*HandShake) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *HandShake) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *HandShake) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *HandShake) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *HandShake) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type HandShakeDecision struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Accepted        bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	NodeId          []byte                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Capabilities    []string               `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	RejectionReason *string                `protobuf:"bytes,4,opt,name=rejection_reason,json=rejectionReason,proto3,oneof" json:"rejection_reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HandShakeDecision) Reset() {
	*x = HandShakeDecision{}
	mi := &file_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandShakeDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandShakeDecision) ProtoMessage() {}

func (x *HandShakeDecision) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandShakeDecision.ProtoReflect.Descriptor instead.
func (*HandShakeDecision) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *HandShakeDecision) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *HandShakeDecision) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *HandShakeDecision) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *HandShakeDecision) GetRejectionReason() string {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return ""
}

// Node Information Exchange
type GetInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RequestGeoInfo bool                   `protobuf:"varint,4,opt,name=request_geo_info,json=requestGeoInfo,proto3" json:"request_geo_info,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetInfo) Reset() {
	*x = GetInfo{}
	mi := &file_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfo) ProtoMessage() {}

func (x *GetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfo.ProtoReflect.Descriptor instead.
func (*GetInfo) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *GetInfo) GetRequestGeoInfo() bool {
	if x != nil {
		return x.RequestGeoInfo
	}
	return false
}

type GetInfoAns struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Network       string                 `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Uptime        uint64                 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Connections   uint32                 `protobuf:"varint,5,opt,name=connections,proto3" json:"connections,omitempty"`
	Location      *GeoLocation           `protobuf:"bytes,7,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoAns) Reset() {
	*x = GetInfoAns{}
	mi := &file_p2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoAns) ProtoMessage() {}

func (x *GetInfoAns) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoAns.ProtoReflect.Descriptor instead.
func (*GetInfoAns) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *GetInfoAns) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetInfoAns) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetInfoAns) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *GetInfoAns) GetConnections() uint32 {
	if x != nil {
		return x.Connections
	}
	return 0
}

func (x *GetInfoAns) GetLocation() *GeoLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

// Peer Discovery
type GetPeers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxCount      uint32                 `protobuf:"varint,2,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeers) Reset() {
	*x = GetPeers{}
	mi := &file_p2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeers) ProtoMessage() {}

func (x *GetPeers) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeers.ProtoReflect.Descriptor instead.
func (*GetPeers) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *GetPeers) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type GetPeersAns struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeersAns) Reset() {
	*x = GetPeersAns{}
	mi := &file_p2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersAns) ProtoMessage() {}

func (x *GetPeersAns) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersAns.ProtoReflect.Descriptor instead.
func (*GetPeersAns) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *GetPeersAns) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Peer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Protocol      uint32                 `protobuf:"varint,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	LastSeen      uint64                 `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Latency       uint32                 `protobuf:"varint,6,opt,name=latency,proto3" json:"latency,omitempty"`
	Status        PeerStatus             `protobuf:"varint,7,opt,name=status,proto3,enum=message.PeerStatus" json:"status,omitempty"`
	Location      *GeoLocation           `protobuf:"bytes,8,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_p2p_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{6}
}

func (x *Peer) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Peer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Peer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Peer) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Peer) GetLastSeen() uint64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *Peer) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *Peer) GetStatus() PeerStatus {
	if x != nil {
		return x.Status
	}
	return PeerStatus_EM_UNKNOWN
}

func (x *Peer) GetLocation() *GeoLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type Error struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Code            ErrorCode              `protobuf:"varint,2,opt,name=code,proto3,enum=message.ErrorCode" json:"code,omitempty"`
	Message         string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	OriginalMessage []byte                 `protobuf:"bytes,4,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"` // Original message that caused error
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_p2p_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{7}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NO_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetOriginalMessage() []byte {
	if x != nil {
		return x.OriginalMessage
	}
	return nil
}

// Additional Structures
type GeoLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Country       string                 `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Region        string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	City          string                 `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Latitude      float32                `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float32                `protobuf:"fixed32,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	mi := &file_p2p_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{8}
}

func (x *GeoLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GeoLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoLocation) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoLocation) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type WrapperMessage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	SessId uint64                 `protobuf:"varint,1,opt,name=sessId,proto3" json:"sessId,omitempty"`
	Type   Function               `protobuf:"varint,2,opt,name=type,proto3,enum=message.Function" json:"type,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*WrapperMessage_Hs
	//	*WrapperMessage_Hsd
	//	*WrapperMessage_Gi
	//	*WrapperMessage_Gia
	//	*WrapperMessage_Gp
	//	*WrapperMessage_Gpa
	//	*WrapperMessage_Err
	Msg           isWrapperMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WrapperMessage) Reset() {
	*x = WrapperMessage{}
	mi := &file_p2p_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrapperMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapperMessage) ProtoMessage() {}

func (x *WrapperMessage) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapperMessage.ProtoReflect.Descriptor instead.
func (*WrapperMessage) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{9}
}

func (x *WrapperMessage) GetSessId() uint64 {
	if x != nil {
		return x.SessId
	}
	return 0
}

func (x *WrapperMessage) GetType() Function {
	if x != nil {
		return x.Type
	}
	return Function_EM_UNSPECIFIED
}

func (x *WrapperMessage) GetMsg() isWrapperMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *WrapperMessage) GetHs() *HandShake {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Hs); ok {
			return x.Hs
		}
	}
	return nil
}

func (x *WrapperMessage) GetHsd() *HandShakeDecision {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Hsd); ok {
			return x.Hsd
		}
	}
	return nil
}

func (x *WrapperMessage) GetGi() *GetInfo {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Gi); ok {
			return x.Gi
		}
	}
	return nil
}

func (x *WrapperMessage) GetGia() *GetInfoAns {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Gia); ok {
			return x.Gia
		}
	}
	return nil
}

func (x *WrapperMessage) GetGp() *GetPeers {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Gp); ok {
			return x.Gp
		}
	}
	return nil
}

func (x *WrapperMessage) GetGpa() *GetPeersAns {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Gpa); ok {
			return x.Gpa
		}
	}
	return nil
}

func (x *WrapperMessage) GetErr() *Error {
	if x != nil {
		if x, ok := x.Msg.(*WrapperMessage_Err); ok {
			return x.Err
		}
	}
	return nil
}

type isWrapperMessage_Msg interface {
	isWrapperMessage_Msg()
}

type WrapperMessage_Hs struct {
	Hs *HandShake `protobuf:"bytes,3,opt,name=hs,proto3,oneof"`
}

type WrapperMessage_Hsd struct {
	Hsd *HandShakeDecision `protobuf:"bytes,4,opt,name=hsd,proto3,oneof"`
}

type WrapperMessage_Gi struct {
	Gi *GetInfo `protobuf:"bytes,5,opt,name=gi,proto3,oneof"`
}

type WrapperMessage_Gia struct {
	Gia *GetInfoAns `protobuf:"bytes,6,opt,name=gia,proto3,oneof"`
}

type WrapperMessage_Gp struct {
	Gp *GetPeers `protobuf:"bytes,7,opt,name=gp,proto3,oneof"`
}

type WrapperMessage_Gpa struct {
	Gpa *GetPeersAns `protobuf:"bytes,8,opt,name=gpa,proto3,oneof"`
}

type WrapperMessage_Err struct {
	Err *Error `protobuf:"bytes,9,opt,name=err,proto3,oneof"`
}

func (*WrapperMessage_Hs) isWrapperMessage_Msg() {}

func (*WrapperMessage_Hsd) isWrapperMessage_Msg() {}

func (*WrapperMessage_Gi) isWrapperMessage_Msg() {}

func (*WrapperMessage_Gia) isWrapperMessage_Msg() {}

func (*WrapperMessage_Gp) isWrapperMessage_Msg() {}

func (*WrapperMessage_Gpa) isWrapperMessage_Msg() {}

func (*WrapperMessage_Err) isWrapperMessage_Msg() {}

var File_p2p_proto protoreflect.FileDescriptor

var file_p2p_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x70, 0x32, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x41, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x04, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0e, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x02, 0x68,
	0x73, 0x12, 0x2e, 0x0a, 0x03, 0x68, 0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x68, 0x73,
	0x64, 0x12, 0x22, 0x0a, 0x02, 0x67, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x02, 0x67, 0x69, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x61, 0x12, 0x23,
	0x0a, 0x02, 0x67, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x02, 0x67, 0x70, 0x12, 0x28, 0x0a, 0x03, 0x67, 0x70, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x41, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x67, 0x70, 0x61, 0x12, 0x22, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x92, 0x01, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4d, 0x5f,
	0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4d, 0x5f, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4d, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4d, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x73, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x5f, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x73, 0x10, 0x06, 0x2a, 0x52, 0x0a,
	0x0a, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_p2p_proto_rawDescOnce sync.Once
	file_p2p_proto_rawDescData []byte
)

func file_p2p_proto_rawDescGZIP() []byte {
	file_p2p_proto_rawDescOnce.Do(func() {
		file_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_rawDesc), len(file_p2p_proto_rawDesc)))
	})
	return file_p2p_proto_rawDescData
}

var file_p2p_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_p2p_proto_goTypes = []any{
	(Function)(0),             // 0: message.Function
	(PeerStatus)(0),           // 1: message.PeerStatus
	(ErrorCode)(0),            // 2: message.ErrorCode
	(*HandShake)(nil),         // 3: message.HandShake
	(*HandShakeDecision)(nil), // 4: message.HandShakeDecision
	(*GetInfo)(nil),           // 5: message.GetInfo
	(*GetInfoAns)(nil),        // 6: message.GetInfoAns
	(*GetPeers)(nil),          // 7: message.GetPeers
	(*GetPeersAns)(nil),       // 8: message.GetPeersAns
	(*Peer)(nil),              // 9: message.Peer
	(*Error)(nil),             // 10: message.Error
	(*GeoLocation)(nil),       // 11: message.GeoLocation
	(*WrapperMessage)(nil),    // 12: message.WrapperMessage
}
var file_p2p_proto_depIdxs = []int32{
	11, // 0: message.GetInfoAns.location:type_name -> message.GeoLocation
	9,  // 1: message.GetPeersAns.peers:type_name -> message.Peer
	1,  // 2: message.Peer.status:type_name -> message.PeerStatus
	11, // 3: message.Peer.location:type_name -> message.GeoLocation
	2,  // 4: message.Error.code:type_name -> message.ErrorCode
	0,  // 5: message.WrapperMessage.type:type_name -> message.Function
	3,  // 6: message.WrapperMessage.hs:type_name -> message.HandShake
	4,  // 7: message.WrapperMessage.hsd:type_name -> message.HandShakeDecision
	5,  // 8: message.WrapperMessage.gi:type_name -> message.GetInfo
	6,  // 9: message.WrapperMessage.gia:type_name -> message.GetInfoAns
	7,  // 10: message.WrapperMessage.gp:type_name -> message.GetPeers
	8,  // 11: message.WrapperMessage.gpa:type_name -> message.GetPeersAns
	10, // 12: message.WrapperMessage.err:type_name -> message.Error
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_p2p_proto_init() }
func file_p2p_proto_init() {
	if File_p2p_proto != nil {
		return
	}
	file_p2p_proto_msgTypes[1].OneofWrappers = []any{}
	file_p2p_proto_msgTypes[3].OneofWrappers = []any{}
	file_p2p_proto_msgTypes[6].OneofWrappers = []any{}
	file_p2p_proto_msgTypes[9].OneofWrappers = []any{
		(*WrapperMessage_Hs)(nil),
		(*WrapperMessage_Hsd)(nil),
		(*WrapperMessage_Gi)(nil),
		(*WrapperMessage_Gia)(nil),
		(*WrapperMessage_Gp)(nil),
		(*WrapperMessage_Gpa)(nil),
		(*WrapperMessage_Err)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_rawDesc), len(file_p2p_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_goTypes,
		DependencyIndexes: file_p2p_proto_depIdxs,
		EnumInfos:         file_p2p_proto_enumTypes,
		MessageInfos:      file_p2p_proto_msgTypes,
	}.Build()
	File_p2p_proto = out.File
	file_p2p_proto_goTypes = nil
	file_p2p_proto_depIdxs = nil
}
